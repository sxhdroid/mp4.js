import { BitReader } from "./bitreader";
import { Finder } from "./finder";
import { BitWriter } from "./bitwriter";
import { DataView2 } from "./dataview";
import * as boxBuilders from "./composer.box";
import * as descrBuilders from "./composer.descr";
import * as boxParsers from "./parser.box";
import * as descrParsers from "./parser.descr";
export declare const Mp4: {
    Builder: {
        DescriptorBuilderMixin: typeof descrBuilders.DescriptorBuilderMixin;
        DescriptorBuilder: typeof descrBuilders.DescriptorBuilder;
        DecoderConfigDescriptorBuilder: typeof descrBuilders.DecoderConfigDescriptorBuilder;
        SLConfigDescriptorBuilder: typeof descrBuilders.SLConfigDescriptorBuilder;
        DecoderSpecificInfoBuilder: typeof descrBuilders.DecoderSpecificInfoBuilder;
        ESDescriptorBuilder: typeof descrBuilders.ESDescriptorBuilder;
        createDescriptorBuilder: (descr: import("../../../../../Users/ukyo/work/mp4.js/src/interface.descr").IDescriptor) => descrBuilders.DescriptorBuilder;
        BoxBuilder: typeof boxBuilders.BoxBuilder;
        FullBoxBuilder: typeof boxBuilders.FullBoxBuilder;
        BoxListBuilder: typeof boxBuilders.BoxListBuilder;
        FileTypeBoxBuilder: typeof boxBuilders.FileTypeBoxBuilder;
        MovieBoxBuilder: typeof boxBuilders.MovieBoxBuilder;
        MediaDataBoxBuilder: typeof boxBuilders.MediaDataBoxBuilder;
        MovieHeaderBoxBuilder: typeof boxBuilders.MovieHeaderBoxBuilder;
        TrackBoxBuilder: typeof boxBuilders.TrackBoxBuilder;
        TrackHeaderBoxBuilder: typeof boxBuilders.TrackHeaderBoxBuilder;
        TrackReferenceBoxBuilder: typeof boxBuilders.TrackReferenceBoxBuilder;
        TrackReferenceTypeBoxBuilder: typeof boxBuilders.TrackReferenceTypeBoxBuilder;
        HintTrackReferenceTypeBoxBuilder: typeof boxBuilders.HintTrackReferenceTypeBoxBuilder;
        DescribeTrackReferenceTypeBoxBuilder: typeof boxBuilders.DescribeTrackReferenceTypeBoxBuilder;
        MediaBoxBuilder: typeof boxBuilders.MediaBoxBuilder;
        MediaHeaderBoxBuilder: typeof boxBuilders.MediaHeaderBoxBuilder;
        HandlerBoxBuilder: typeof boxBuilders.HandlerBoxBuilder;
        MediaInformationBoxBuilder: typeof boxBuilders.MediaInformationBoxBuilder;
        VideoMediaHeaderBoxBuilder: typeof boxBuilders.VideoMediaHeaderBoxBuilder;
        SoundMediaHeaderBoxBuilder: typeof boxBuilders.SoundMediaHeaderBoxBuilder;
        HintMediaHeaderBoxBuilder: typeof boxBuilders.HintMediaHeaderBoxBuilder;
        NullMediaHeaderBoxBuilder: typeof boxBuilders.NullMediaHeaderBoxBuilder;
        DataInformationBoxBuilder: typeof boxBuilders.DataInformationBoxBuilder;
        DataEntryUrlBoxBuilder: typeof boxBuilders.DataEntryUrlBoxBuilder;
        DataEntryUrnBoxBuilder: typeof boxBuilders.DataEntryUrnBoxBuilder;
        DataReferenceBoxBuilder: typeof boxBuilders.DataReferenceBoxBuilder;
        SampleTableBoxBuilder: typeof boxBuilders.SampleTableBoxBuilder;
        TimeToSampleBoxBuilder: typeof boxBuilders.TimeToSampleBoxBuilder;
        CompositionOffsetBoxBuilder: typeof boxBuilders.CompositionOffsetBoxBuilder;
        SampleEntryBuilder: typeof boxBuilders.SampleEntryBuilder;
        HintSampleEntryBuilder: typeof boxBuilders.HintSampleEntryBuilder;
        VisualSampleEntryBuilder: typeof boxBuilders.VisualSampleEntryBuilder;
        MP4VisualSampleEntryBuilder: typeof boxBuilders.MP4VisualSampleEntryBuilder;
        ESDBoxBuilder: typeof boxBuilders.ESDBoxBuilder;
        AudioSampleEntryBuilder: typeof boxBuilders.AudioSampleEntryBuilder;
        MP4AudioSampleEntryBuilder: typeof boxBuilders.MP4AudioSampleEntryBuilder;
        SampleDescriptionBoxBuilder: typeof boxBuilders.SampleDescriptionBoxBuilder;
        SampleSizeBoxBuilder: typeof boxBuilders.SampleSizeBoxBuilder;
        SampleToChunkBoxBuilder: typeof boxBuilders.SampleToChunkBoxBuilder;
        ChunkOffsetBoxBuilder: typeof boxBuilders.ChunkOffsetBoxBuilder;
        ChunkOffset64BoxBuilder: typeof boxBuilders.ChunkOffset64BoxBuilder;
    };
    Parser: {
        getDescriptorInfo: (bytes: Uint8Array, offset?: number) => import("../../../../../Users/ukyo/work/mp4.js/src/interface.descr").IDescriptor;
        DescriptorParserMixin: typeof descrParsers.DescriptorParserMixin;
        DescriptorParser: typeof descrParsers.DescriptorParser;
        DecoderSpecificInfoParser: typeof descrParsers.DecoderSpecificInfoParser;
        ProfileLevelINdicationIndexDescriptor: typeof descrParsers.ProfileLevelINdicationIndexDescriptor;
        DecoderConfigDescriptorParser: typeof descrParsers.DecoderConfigDescriptorParser;
        SLConfigDescriptorParser: typeof descrParsers.SLConfigDescriptorParser;
        IPIDescriptorPointerParser: typeof descrParsers.IPIDescriptorPointerParser;
        IPIdentificationDataSetParser: typeof descrParsers.IPIdentificationDataSetParser;
        IPMPDescriptorPointerParser: typeof descrParsers.IPMPDescriptorPointerParser;
        LanguageDescriptorParser: typeof descrParsers.LanguageDescriptorParser;
        QosDescriptorParser: typeof descrParsers.QosDescriptorParser;
        ExtensionDescriptorParser: typeof descrParsers.ExtensionDescriptorParser;
        ESDescriptorParser: typeof descrParsers.ESDescriptorParser;
        InitialObjectDescriptorParser: typeof descrParsers.InitialObjectDescriptorParser;
        createDescriptorParser: (bytes: Uint8Array, tag: number) => descrParsers.DescriptorParser;
        BoxParserMixin: typeof boxParsers.BoxParserMixin;
        RootParser: typeof boxParsers.RootParser;
        BoxParser: typeof boxParsers.BoxParser;
        FullBoxParser: typeof boxParsers.FullBoxParser;
        FileTypeBoxParser: typeof boxParsers.FileTypeBoxParser;
        BoxListParser: typeof boxParsers.BoxListParser;
        MovieBoxParser: typeof boxParsers.MovieBoxParser;
        MediaDataBoxParser: typeof boxParsers.MediaDataBoxParser;
        MovieHeaderBoxParser: typeof boxParsers.MovieHeaderBoxParser;
        TrackBoxParser: typeof boxParsers.TrackBoxParser;
        TrackHeaderBoxParser: typeof boxParsers.TrackHeaderBoxParser;
        TrackReferenceBox: typeof boxParsers.TrackReferenceBox;
        TrackReferenceTypeBox: typeof boxParsers.TrackReferenceTypeBox;
        HintTrackReferenceTypeBox: typeof boxParsers.HintTrackReferenceTypeBox;
        DescribeTrackReferenceTypeBox: typeof boxParsers.DescribeTrackReferenceTypeBox;
        MediaBoxParser: typeof boxParsers.MediaBoxParser;
        MediaHeaderBoxParser: typeof boxParsers.MediaHeaderBoxParser;
        HandlerBoxParser: typeof boxParsers.HandlerBoxParser;
        MediaInformationBoxParser: typeof boxParsers.MediaInformationBoxParser;
        VideoMediaHeaderBoxParser: typeof boxParsers.VideoMediaHeaderBoxParser;
        SoundMediaHeaderBoxParser: typeof boxParsers.SoundMediaHeaderBoxParser;
        HintMediaHeaderBoxParser: typeof boxParsers.HintMediaHeaderBoxParser;
        NullMediaHeaderBoxParser: typeof boxParsers.NullMediaHeaderBoxParser;
        DataInformationBoxParser: typeof boxParsers.DataInformationBoxParser;
        DataReferenceBoxParser: typeof boxParsers.DataReferenceBoxParser;
        DataEntryUrlBoxParser: typeof boxParsers.DataEntryUrlBoxParser;
        DataEntryUrnBoxParser: typeof boxParsers.DataEntryUrnBoxParser;
        SampleTableBoxParser: typeof boxParsers.SampleTableBoxParser;
        TimeToSampleBoxParser: typeof boxParsers.TimeToSampleBoxParser;
        CompositionOffsetBoxParser: typeof boxParsers.CompositionOffsetBoxParser;
        SampleEntryParser: typeof boxParsers.SampleEntryParser;
        HintSampleEntryParser: typeof boxParsers.HintSampleEntryParser;
        VisualSampleEntryParser: typeof boxParsers.VisualSampleEntryParser;
        AudioSampleEntryParser: typeof boxParsers.AudioSampleEntryParser;
        ESDBoxParser: typeof boxParsers.ESDBoxParser;
        MP4VisualSampleEntryParser: typeof boxParsers.MP4VisualSampleEntryParser;
        MP4AudioSampleEntryParser: typeof boxParsers.MP4AudioSampleEntryParser;
        MpegSampleEntryParser: typeof boxParsers.MpegSampleEntryParser;
        SampleDescriptionBoxParser: typeof boxParsers.SampleDescriptionBoxParser;
        SampleSizeBoxParser: typeof boxParsers.SampleSizeBoxParser;
        SampleToChunkBoxParser: typeof boxParsers.SampleToChunkBoxParser;
        ChunkOffsetBoxParser: typeof boxParsers.ChunkOffsetBoxParser;
        ChunkOffset64BoxParser: typeof boxParsers.ChunkOffset64BoxParser;
        SyncSampleBoxParser: typeof boxParsers.SyncSampleBoxParser;
        ShadowSyncSampleBoxParser: typeof boxParsers.ShadowSyncSampleBoxParser;
        DegradationPriorityBoxParser: typeof boxParsers.DegradationPriorityBoxParser;
        PaddingBitsBoxParser: typeof boxParsers.PaddingBitsBoxParser;
        FreeSpaceBoxParser: typeof boxParsers.FreeSpaceBoxParser;
        SkipBoxParser: typeof boxParsers.SkipBoxParser;
        EditBoxParser: typeof boxParsers.EditBoxParser;
        EditListBoxParser: typeof boxParsers.EditListBoxParser;
        CopyrightBoxParser: typeof boxParsers.CopyrightBoxParser;
        MovieExtendsBoxParser: typeof boxParsers.MovieExtendsBoxParser;
        MovieExtendsHeaderBoxParser: typeof boxParsers.MovieExtendsHeaderBoxParser;
        TrackExtendsBoxParser: typeof boxParsers.TrackExtendsBoxParser;
        MovieFlagmentBoxParser: typeof boxParsers.MovieFlagmentBoxParser;
        MovieFragmentHeaderBoxParser: typeof boxParsers.MovieFragmentHeaderBoxParser;
        TrackFragmentBoxParser: typeof boxParsers.TrackFragmentBoxParser;
        TrackFragmentHeaderBoxParser: typeof boxParsers.TrackFragmentHeaderBoxParser;
        TrackRunBoxParser: typeof boxParsers.TrackRunBoxParser;
        TrackFragmentRandomAccessBoxParser: typeof boxParsers.TrackFragmentRandomAccessBoxParser;
        MovieFragmentRandomAccessOffsetBoxParser: typeof boxParsers.MovieFragmentRandomAccessOffsetBoxParser;
        SampleDependencyTypeBoxParser: typeof boxParsers.SampleDependencyTypeBoxParser;
        SampleToGroupBoxParser: typeof boxParsers.SampleToGroupBoxParser;
        SampleGroupDescriptionEntryParser: typeof boxParsers.SampleGroupDescriptionEntryParser;
        VisualSampleGroupEntryParser: typeof boxParsers.VisualSampleGroupEntryParser;
        AudioSampleGroupEntryParser: typeof boxParsers.AudioSampleGroupEntryParser;
        HintSampleGroupEntryParser: typeof boxParsers.HintSampleGroupEntryParser;
        SampleGroupDescriptionBoxParser: typeof boxParsers.SampleGroupDescriptionBoxParser;
        VisualRollRecoveryEntryParser: typeof boxParsers.VisualRollRecoveryEntryParser;
        AudioRollRecoveryEntryParser: typeof boxParsers.AudioRollRecoveryEntryParser;
        SampleScaleBoxParser: typeof boxParsers.SampleScaleBoxParser;
        SubSampleInformationBoxParser: typeof boxParsers.SubSampleInformationBoxParser;
        ProgressiveDownloadInfoBoxParser: typeof boxParsers.ProgressiveDownloadInfoBoxParser;
        MetaBoxParser: typeof boxParsers.MetaBoxParser;
        XMLBoxParsr: typeof boxParsers.XMLBoxParsr;
        BinaryXMLBoxParser: typeof boxParsers.BinaryXMLBoxParser;
        ItemLocationBoxParser: typeof boxParsers.ItemLocationBoxParser;
        PrimaryItemBoxParser: typeof boxParsers.PrimaryItemBoxParser;
        ItemProtectionBoxParser: typeof boxParsers.ItemProtectionBoxParser;
        ItemInfoEntryParser: typeof boxParsers.ItemInfoEntryParser;
        ItemInfoBoxParser: typeof boxParsers.ItemInfoBoxParser;
        ProtectionSchemeInfoBoxParser: typeof boxParsers.ProtectionSchemeInfoBoxParser;
        OriginalFormatBoxParser: typeof boxParsers.OriginalFormatBoxParser;
        IPMPInfoBoxParser: typeof boxParsers.IPMPInfoBoxParser;
        createBoxParser: (bytes: Uint8Array, type: string) => boxParsers.BoxParser;
    };
    BOX_TYPE_FILE_TYPE_BOX: "ftyp";
    BOX_TYPE_MOVIE_BOX: "moov";
    BOX_TYPE_MEDIA_DATA_BOX: "mdat";
    BOX_TYPE_MOVIE_HEADER_BOX: "mvhd";
    BOX_TYPE_TRACK_BOX: "trak";
    BOX_TYPE_TRACK_HEADER_BOX: "tkhd";
    BOX_TYPE_TRACK_REFERENCE_BOX: "tref";
    BOX_TYPE_HINT_TRACK_REFERENCE_TYPE_BOX: "hint";
    BOX_TYPE_DISCRIBE_TRACK_REFERENCE_TYPE_BOX: "cdsc";
    BOX_TYPE_MEDIA_BOX: "mdia";
    BOX_TYPE_MEDIA_HEADER_BOX: "mdhd";
    BOX_TYPE_HANDLER_BOX: "hdlr";
    BOX_TYPE_MEDIA_INFORMATION_BOX: "minf";
    BOX_TYPE_VIDEO_MEDIA_HEADER_BOX: "vmhd";
    BOX_TYPE_SOUND_MEDIA_HEADER_BOX: "smhd";
    BOX_TYPE_HINT_MEDIA_HEADER_BOX: "hmhd";
    BOX_TYPE_NULL_MEDIA_HEADER_BOX: "nmhd";
    BOX_TYPE_DATA_INFORMATION_BOX: "dinf";
    BOX_TYPE_DATA_REFERENCE_BOX: "dref";
    BOX_TYPE_DATA_ENTRY_URL_BOX: "url ";
    BOX_TYPE_DATA_ENTRY_URN_BOX: "urn ";
    BOX_TYPE_SAMPLE_TABLE_BOX: "stbl";
    BOX_TYPE_TIME_TO_SAMPLE_BOX: "stts";
    BOX_TYPE_COMPOSITION_OFFSET_BOX: "ctts";
    BOX_TYPE_ES_DESCRIPTOR_BOX: "esds";
    BOX_TYPE_MP4_VISUAL_SAMPLE_ENTRY: "mp4v";
    BOX_TYPE_MP4_AUDIO_SAMPLE_ENTRY: "mp4a";
    BOX_TYPE_MPEG_SAMPLE_ENTRY: "mp4s";
    BOX_TYPE_SAMPLE_DESCRIPTION_BOX: "stsd";
    BOX_TYPE_SAMPLE_SIZE_BOX: "stsz";
    BOX_TYPE_SAMPLE_TO_CHUNK_BOX: "stsc";
    BOX_TYPE_CHUNK_OFFSET_BOX: "stco";
    BOX_TYPE_CHUNK_OFFSET64_BOX: "co64";
    BOX_TYPE_SYNC_SAMPLE_BOX: "stss";
    BOX_TYPE_SHADOW_SYNC_SAMPLE_BOX: "stsh";
    BOX_TYPE_DEGRADATION_PRIORITY_BOX: "stdp";
    BOX_TYPE_PADDING_BITS_BOX: "padb";
    BOX_TYPE_FREE_SPACE_BOX: "free";
    BOX_TYPE_SKIP_BOX: "skip";
    BOX_TYPE_EDIT_BOX: "edts";
    BOX_TYPE_EDIT_LIST_BOX: "elst";
    BOX_TYPE_COPYRIGHT_BOX: "cprt";
    BOX_TYPE_MOVIE_EXTENDS_BOX: "mvex";
    BOX_TYPE_MOVIE_EXTENDS_HEADER_BOX: "mehd";
    BOX_TYPE_TRACK_EXTENDS_BOX: "trex";
    BOX_TYPE_MOVIE_FLAGMENT_BOX: "moof";
    BOX_TYPE_MOVIE_FRAGMENT_HEADER_BOX: "mfhd";
    BOX_TYPE_TRACK_FRAGMENT_BOX: "traf";
    BOX_TYPE_TRACK_FRAGMENT_HEADER_BOX: "tfhd";
    BOX_TYPE_TRACK_RUN_BOX: "trun";
    BOX_TYPE_TRACK_FRAGMENT_RANDOM_ACCESS_BOX: "tfra";
    BOX_TYPE_MOVIE_FRAGMENT_RANDOM_ACCESS_OFFSET_BOX: "mfro";
    BOX_TYPE_SAMPLE_DEPENDENCY_TYPE_BOX: "sdtp";
    BOX_TYPE_SAMPLE_TO_GROUPE_BOX: "sbgp";
    BOX_TYPE_SAMPLE_GROUP_DESCRIPTION_BOX: "sgpd";
    BOX_TYPE_ROLL_RECOVERY_ENTRY: "roll";
    BOX_TYPE_SAMPLE_SCALE_BOX: "stsl";
    BOX_TYPE_SUB_SAMPLE_INFORMATION_BOX: "subs";
    BOX_TYPE_PROGRESSIVE_DOWNLOAD_INFO_BOX: "pdin";
    BOX_TYPE_META_BOX: "meta";
    BOX_TYPE_XML_BOX: "xml ";
    BOX_TYPE_BINARY_XML_BOX: "bxml";
    BOX_TYPE_ITEM_LOCATION_BOX: "iloc";
    BOX_TYPE_PRIMARY_ITEM_BOX: "pitm";
    BOX_TYPE_ITEM_PROTECTION_BOX: "ipro";
    BOX_TYPE_ITEM_INFO_ENTRY: "infe";
    BOX_TYPE_ITEM_INFO_BOX: "iinf";
    BOX_TYPE_PROTECTION_SCHEME_INFO_BOX: "sinf";
    BOX_TYPE_ORIGINAL_FORMAT_BOX: "frma";
    BOX_TYPE_IPMP_INFO_BOX: "imif";
    BOX_TYPE_IPMP_CONTROL_BOX: "impc";
    DESCR_TAG_ES_DESCRIPTOR: 3;
    DESCR_TAG_DECODER_CONFIG_DESCRIPTOR: 4;
    DESCR_TAG_DECODER_SPECIFIC_INFO: 5;
    DESCR_TAG_SL_CONFIG_DESCRIPTOR: 6;
    DESCR_TAG_PROFILE_LEVEL_INDICATION_INDEX_DESCRIPTOR: 20;
    getChunks(bytes: Uint8Array, trackBox: import("../../../../../Users/ukyo/work/mp4.js/src/interface.box").ITrackBox): Uint8Array[];
    concatBytes(bytess: Uint8Array[]): Uint8Array;
    parse(bytes: Uint8Array): import("../../../../../Users/ukyo/work/mp4.js/src/interface.box").IBox[];
    createMp4DescriptorSpecificInfo(sampleRate: number, channels: number): Uint8Array;
    extractAudio(bytes: Uint8Array): Uint8Array;
    extractRawAudio(bytes: Uint8Array): {
        type: string;
        data: Uint8Array;
    };
    aacToM4a(bytes: Uint8Array): Uint8Array;
    DataView2: typeof DataView2;
    BitReader: typeof BitReader;
    BitWriter: typeof BitWriter;
    Finder: typeof Finder;
};
